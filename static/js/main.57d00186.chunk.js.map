{"version":3,"sources":["components/Title.js","components/css/sectionTitle.js","components/Fridge.js","components/RecipeDisplay.js","components/Recipe.js","components/RecipeTitle.js","components/Overview.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["TitleStyle","color","gridArea","fontFamily","backgroundColor","fontSize","textTransform","margin","Title","react_default","a","createElement","style","className","sectionTitle","textAlign","padding","Fridge","method","action","target","name","value","type","for","RecipeDisplay","state","loading","fetch","response_src","text","data_src","response_in","data_in","this","setState","source","ingredients","dangerouslySetInnerHTML","__html","Component","Recipe","response","data","recipe","RecipeTitle","title","Overview","FooterStyle","Footer","App","components_Title","components_Overview","components_Fridge","components_RecipeTitle","components_RecipeDisplay","components_Recipe","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.57d00186.chunk.js","sourcesContent":["import React from 'react';\r\nimport './css/Fonts.css';\r\n\r\n// Styling Tittle component with JSX object\r\nconst TitleStyle = {\r\n  color: \"#fff\",\r\n  gridArea: \"title\",\r\n  fontFamily: \"Adlinnaka\",\r\n  backgroundColor: \"#87bc4a\",\r\n  fontSize: \"1em\",\r\n  textTransform: \"lowercase\",\r\n  margin: \"-2em -2em 0em -2em\"\r\n}\r\n\r\nconst Title = () => (\r\n    <div style={TitleStyle} className=\"Title\">\r\n      <h2>We Have Food at Home</h2>\r\n    </div>\r\n)\r\n\r\nexport default Title\r\n","const sectionTitle = {\r\n    fontFamily: \"Adlinnaka\",\r\n    textTransform: \"lowercase\",\r\n    fontSize: \"1.3em\",\r\n    textAlign: \"left\",\r\n    backgroundColor: \"#454545\",\r\n    color: \"#fff\",\r\n    padding: \"0.5em 1em\",\r\n    margin: \"0em -1.5em 0em -2em\"\r\n}\r\n\r\nexport default sectionTitle;","import React from 'react';\r\nimport './css/Fridge.css';\r\nimport './css/Fonts.css';\r\nimport sectionTitle from './css/sectionTitle.js';\r\n\r\nconst Fridge = () => {\r\n    return (\r\n        <div className=\"Fridge\">\r\n            <h2 style={sectionTitle}>Select your ingredient(s):</h2>\r\n            <form method=\"POST\" action=\"http://localhost:5000/userIngredients\" target=\"_blank\">\r\n                {/* <label>Ingredi<input type=\"text\" name=\"ingredient\"/> \r\n                <button type=\"submit\">Submit</button>\r\n                <button type=\"reset\">Reset</button> */}\r\n                <ul className=\"ingredients\">\r\n                    <li><input name=\"ingredient\" value=\"apple\" type=\"checkbox\" /><label for=\"ingredient\">Apple</label></li>\r\n                    <li><input name=\"ingredient\" value=\"potato\" type=\"checkbox\" /><label for=\"ingredient\">Potato</label></li>\r\n                    <li><input name=\"ingredient\" value=\"cucumber\" type=\"checkbox\" /><label for=\"ingredient\">Cucumber</label></li>\r\n                    <li><input name=\"ingredient\" value=\"carrot\" type=\"checkbox\" /><label for=\"ingredient\">Carrot</label></li>\r\n                    <li><input name=\"ingredient\" value=\"peanut butter\" type=\"checkbox\" /><label for=\"ingredient\">Peanut Butter</label></li>\r\n                    <li><input name=\"ingredient\" value=\"onion\" type=\"checkbox\" /><label for=\"ingredient\">Onion</label></li>\r\n                    <li><input name=\"ingredient\" value=\"celery\" type=\"checkbox\" /><label for=\"ingredient\">Celery</label></li>\r\n                    <li><input name=\"ingredient\" value=\"celery\" type=\"checkbox\" /><label for=\"ingredient\">Celery</label></li></ul>\r\n                <ul className=\"ingredients\">\r\n                    <li><input name=\"ingredient\" value=\"apple\" type=\"checkbox\" /><label for=\"ingredient\">Apple</label></li>\r\n                    <li><input name=\"ingredient\" value=\"potato\" type=\"checkbox\" /><label for=\"ingredient\">Potato</label></li>\r\n                    <li><input name=\"ingredient\" value=\"cucumber\" type=\"checkbox\" /><label for=\"ingredient\">Cucumber</label></li>\r\n                    <li><input name=\"ingredient\" value=\"carrot\" type=\"checkbox\" /><label for=\"ingredient\">Carrot</label></li>\r\n                    <li><input name=\"ingredient\" value=\"peanut butter\" type=\"checkbox\" /><label for=\"ingredient\">Peanut Butter</label></li>\r\n                    <li><input name=\"ingredient\" value=\"onion\" type=\"checkbox\" /><label for=\"ingredient\">Onion</label></li>\r\n                    <li><input name=\"ingredient\" value=\"celery\" type=\"checkbox\" /><label for=\"ingredient\">Celery</label></li>\r\n                    <li><input name=\"ingredient\" value=\"celery\" type=\"checkbox\" /><label for=\"ingredient\">Celery</label></li>\r\n                </ul>\r\n                <ul className=\"ingredients\">\r\n                    <li><input name=\"ingredient\" value=\"apple\" type=\"checkbox\" /><label for=\"ingredient\">Apple</label></li>\r\n                    <li><input name=\"ingredient\" value=\"potato\" type=\"checkbox\" /><label for=\"ingredient\">Potato</label></li>\r\n                    <li><input name=\"ingredient\" value=\"cucumber\" type=\"checkbox\" /><label for=\"ingredient\">Cucumber</label></li>\r\n                    <li><input name=\"ingredient\" value=\"carrot\" type=\"checkbox\" /><label for=\"ingredient\">Carrot</label></li>\r\n                    <li><input name=\"ingredient\" value=\"peanut butter\" type=\"checkbox\" /><label for=\"ingredient\">Peanut Butter</label></li>\r\n                    <li><input name=\"ingredient\" value=\"onion\" type=\"checkbox\" /><label for=\"ingredient\">Onion</label></li>\r\n                    <li><input name=\"ingredient\" value=\"celery\" type=\"checkbox\" /><label for=\"ingredient\">Celery</label></li>\r\n                    <li><input name=\"ingredient\" value=\"celery\" type=\"checkbox\" /><label for=\"ingredient\">Celery</label></li>\r\n                </ul>\r\n                <div className=\"Buttons\">\r\n                    <button type=\"Submit\">Enter</button>\r\n                    <button type=\"Reset\">Reset</button>\r\n                </div>\r\n            </form>\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Fridge;","import React, {Component} from 'react';\r\nimport './css/Main.css';\r\n\r\nclass RecipeDisplay extends Component {\r\n\r\n    // Initialize state of component\r\n   state = {\r\n      loading: true\r\n   }\r\n\r\n  // Asynchronous function gets quote from backend or API then changes the state of component when quote has been obtained\r\n async componentDidMount(){\r\n   const URL_src = \"http://localhost:5500/sources\"; // URL of Flask backend endpoint\r\n   const response_src = await fetch(URL_src);\r\n   const data_src = await response_src.text(); // we could also potentially use response.formData()\r\n   \r\n   const URL_in = \"http://localhost:5500/ingredients\"; // URL of Flask backend endpoint\r\n   const response_in = await fetch(URL_in);\r\n   const data_in = await response_in.text(); // we could also potentially use response.formData()\r\n\r\n   // Change state of component\r\n   this.setState({source: data_src, loading: false})\r\n   this.setState({ingredients: data_in, loading: false})\r\n }\r\n\r\n render(){\r\n    return(\r\n\r\n        <div className=\"RecipeDisplay\">\r\n            {this.state.loading ? <h3>Loading . . . </h3> : <h3 className=\"Source\" dangerouslySetInnerHTML={{__html: this.state.source}}></h3>}\r\n            {this.state.loading ? <div>Loading . . . </div> : <div className=\"Ingredients\" dangerouslySetInnerHTML={{__html: this.state.ingredients}}></div>}\r\n        </div>\r\n    )\r\n }\r\n}\r\nexport default RecipeDisplay;","import React, { Component } from 'react';\r\nimport './css/Main.css';\r\n\r\nclass Recipe extends Component {\r\n\r\n     // Initialize state of component\r\n    state = {\r\n       loading: true\r\n    }\r\n\r\n   // Asynchronous function gets quote from backend or API then changes the state of component when quote has been obtained\r\n  async componentDidMount(){\r\n    const RECIPE_URL = \"http://localhost:5000/recipe\"; // URL of Flask backend endpoint\r\n    const response = await fetch(RECIPE_URL);\r\n    const data = await response.text(); // we could also potentially use response.formData()\r\n    \r\n    // Change state of component\r\n    this.setState({recipe: data, loading: false})\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"Recipe\">\r\n          {this.state.loading ? <div> Loading...</div> : <div dangerouslySetInnerHTML={{__html: this.state.recipe}}></div>}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Recipe","import React, {Component} from 'react';\r\nimport sectionTitle from './css/sectionTitle.js';\r\nimport './css/Fonts.css';\r\n\r\nclass RecipeTitle extends Component {\r\n\r\n    // Initialize state of component\r\n   state = {\r\n      loading: true\r\n   }\r\n\r\n  // Asynchronous function gets quote from backend or API then changes the state of component when quote has been obtained\r\n async componentDidMount(){\r\n   const URL = \"http://localhost:5500/title\"; // URL of Flask backend endpoint\r\n   const response = await fetch(URL);\r\n   const data = await response.text(); // we could also potentially use response.formData()\r\n   \r\n   // Change state of component\r\n   this.setState({title: data, loading: false})\r\n }\r\n\r\n render(){\r\n    return(\r\n        <div className=\"RecipeTitle\">\r\n            {this.state.loading ? <h2> Loading . . . </h2> : <h2 style={sectionTitle}dangerouslySetInnerHTML={{__html: this.state.title}}></h2>}\r\n        </div>\r\n    )\r\n }\r\n}\r\nexport default RecipeTitle;","import React from 'react';\r\nimport './css/Main.css';\r\n\r\nconst Overview = () => (\r\n    <div className=\"Overview\">\r\n        <div className=\"ov\">\r\n            <p>Have you ever debated with your parents, or even yourself about whether you should\r\n            eat out or eat at home, and you just tell yourself \"we have food at home\", but it turns out\r\n            you DON'T have food at home?</p>\r\n            <p>But as it turns out, you DO have food at home. It's just ingredients you never thought \r\n            to make anything with. That's what we're here to help you with. </p>\r\n            <p>Take a look at the available ingredients and see what recipe you may be able to prepare!</p>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default Overview\r\n","import React from 'react';\r\nimport './css/Fonts.css';\r\n\r\nconst FooterStyle = {\r\n    backgroundColor: \"#87bc4a\",\r\n    margin: \"0 -2em -2em -2em\",\r\n    padding: \"1em\",\r\n    color: \"#fff\",\r\n    fontFamily: \"Adlinnaka\"\r\n}\r\n\r\nconst Footer = () => (\r\n    <div className=\"Footer\" style={FooterStyle}>\r\n      Copyright Misha Lukov All Rights Reserved\r\n    </div>\r\n)\r\n\r\nexport default Footer","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Title from './components/Title';\r\nimport Fridge from './components/Fridge';\r\n//import Button from './components/Button';\r\nimport RecipeDisplay from './components/RecipeDisplay';\r\nimport Recipe from './components/Recipe';\r\nimport RecipeTitle from './components/RecipeTitle';\r\nimport Overview from './components/Overview';\r\nimport Footer from './components/Footer';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n        <div className=\"main\">\r\n          <Title/>\r\n          <Overview/>\r\n          <Fridge/>\r\n          <div className=\"RecipeElement\">\r\n            <RecipeTitle />\r\n            <RecipeDisplay/>\r\n            <Recipe/>\r\n          </div>\r\n          <Footer/>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}